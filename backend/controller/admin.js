const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../model/userShema');
const Admin = require('../model/adminSchema');
const salesdataSchema = require('../model/salesdataSchema');
const userShema = require('../model/userShema');

module.exports = {
  login: async (req, res) => {
    const { email, password } = req.body;
    try {
      // Find user by email in MongoDB
      const user = await Admin.findOne({ email });
      if (!user) {
        return res.status(400).json({ error: 'Invalid Email' });
      }
      // Compare passwords
      const isValidPassword = await bcrypt.compare(password, user.password); // Compare password
      if (!isValidPassword) {
        return res.status(400).json({ error: 'Invalid Password' });
      }
      // Issue JWT
      const token = jwt.sign({ email: user.email }, process.env.JWT_SECRET_ADMIN, { expiresIn: '1h' });
      return res.status(200).json({ token, role: "admin" });
    } catch (error) {
      console.log(error);

      return res.status(500).json({ error: 'Internal server error' });
    }
  },
  addUser: async (req, res) => {
    const { name, email } = req.body;
    try {
      // Check for duplicate emails
      const existingUser = await User.findOne({ email }); // Use email to check for duplicates
      if (existingUser) {
        return res.status(400).json({ error: 'Email already exists' });
      }
      // Automatically create password based on email (first 4 letters + '@123')
      const autoGeneratedPassword = email.slice(0, 4) + '@123'; // Take first 4 characters of email and append @123
      console.log('Auto-generated password:', autoGeneratedPassword);

      // Hash the automatically created password
      const password_hash = await bcrypt.hash(autoGeneratedPassword, 10);
      const user = new User({ name, email, password: password_hash });
      await user.save();

      return res.status(201).json({ message: 'User created successfully', });
    } catch (error) {
      console.log(error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  },
  deleteUser: async (req, res) => {
    try {
      const { email } = req.params;
      const user = await User.findOneAndDelete({ email });
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }

      return res.status(200).json({ message: `User with email ${email} deleted successfully` });
    } catch (error) {
      console.log(error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  },
  blockUser: async (req, res) => {
    try {
      const { email } = req.params;
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }

      // Set the user's status to blocked
      user.isBlocked = true;
      await user.save();

      return res.status(200).json({ message: `User with email ${email} has been blocked` });
    } catch (error) {
      console.log(error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  },
  unblockUser: async (req, res) => {
    try {
      const { email } = req.params;
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }

      // Set the user's status to unblocked
      user.isBlocked = false;
      await user.save();

      return res.status(200).json({ message: `User with email ${email} has been unblocked` });
    } catch (error) {
      console.log(error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  },
  resetPaswword: async (req, res) => {
    try {
      const { email } = req.params;
      const user = await User.findOne({ email });
      const autoGeneratedPassword = email.slice(0, 4) + '@123'; 
      // Hash the automatically created password
      const password_hash = await bcrypt.hash(autoGeneratedPassword, 10);
      user.password = password_hash;
      user.firstLogin = true;
      await user.save();
      return res.status(201).json({ message: 'Password reset successfully', });
    } catch (error) {
      return res.status(500).json({ error: 'Internal server error' });
    }
  },
  getsales: async (req, res) => {
    try {
      const salesData = await salesdataSchema.find();
      return res.status(200).json({data:salesData});
    } catch (error) {
      console.error(error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  },
  alluser: async (req, res) => {
    try {
      const users = await userShema.find();
      return res.status(200).json({data:users});
    } catch (error) {
      console.error(error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  },
}